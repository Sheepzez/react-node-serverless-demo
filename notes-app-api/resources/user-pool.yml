AWSTemplateFormatVersion: '2010-09-09'
Description: react-node-serverless-demo application resources

Resources:
  NotesCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ['${appname}-notes-user-pool', { appname: !Ref ApplicationName }]
      UsernameAttributes: ["email"]
  NotesCognitoPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ['${appname}-notes-app', { appname: !Ref ApplicationName }]
      ExplicitAuthFlows: ["ALLOW_ADMIN_USER_PASSWORD_AUTH", "ALLOW_CUSTOM_AUTH", "ALLOW_USER_SRP_AUTH", "ALLOW_REFRESH_TOKEN_AUTH"]
      UserPoolId: !Ref NotesCognitoUserPool
  NotesCognitoPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ['${appname}-notes-app', { appname: !Ref ApplicationName }]
      UserPoolId: !Ref NotesCognitoUserPool
  NotesCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub ['${appname}-notes-identity-pool', { appname: !Ref ApplicationName }]
      CognitoIdentityProviders:
        - ClientId: !Ref NotesCognitoPoolClient
          ProviderName:
            Fn::GetAtt: [ NotesCognitoUserPool, ProviderName ]
      AllowUnauthenticatedIdentities: false

  # IAM roles
  NotesCognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: NotesCognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt: [NotesCognitoAuthRole, Arn]

  # IAM role used for authenticated users
  NotesCognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: NotesCognitoIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'

              # Allow users to invoke our API
              - Effect: 'Allow'
                Action:
                  - 'execute-api:Invoke'
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:execute-api:'
                      - Ref: AWS::Region
                      - ':'
                      - Ref: AWS::AccountId
                      - ':'
                      - Ref: ApiGatewayRestApi
                      - '/*'

              # Allow users to upload attachments to their
              # folder inside our S3 bucket
              - Effect: 'Allow'
                Action:
                  - 's3:*'
                Resource:
                  - Fn::Join:
                      - ''
                      - - Fn::GetAtt: [NotesUploadsS3Bucket, Arn]
                        - '/private/'
                        - '$'
                        - '{cognito-identity.amazonaws.com:sub}/*'
# Print out the Id of the Identity Pool that is created
Outputs:
  IdentityPoolId:
    Value:
      Ref: NotesCognitoUserPool
